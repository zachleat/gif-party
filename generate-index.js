var dirs = ['gifs/default'],
	OUTPUT_FILE = 'index.html',
	FALLBACK_STYLE_FILE = 'dist/fallback.css',
	TEMPLATE_FILE = 'templates/index.ejs',
	HASH_PREFIX = 'img',
	AUTOGENERATED_WARNING = 'THIS FILE WAS AUTOGENERATED BY gif-party',
	fs = require( 'fs' ),
	ejs = require( 'ejs' ),
	template = [],
	styles = [ '/* ' + AUTOGENERATED_WARNING + ' */' ],
	counter = 1;

dirs.forEach(function( dir ) {
	var files = fs.readdirSync( './' + dir + '/' ),
		url;

	for( var j = 0, k = files.length; j<k; j++ ) {
		if( files[ j ].match( /.(gif)/ ) ) { // |jpg|jpeg|png
			url = dir + '/' + files[ j ];

			template.push( '<a href="#' + HASH_PREFIX + counter + '" class="gifparty' + ( counter === 1 ? ' default' : '' ) + '" id="' + HASH_PREFIX + ( counter - 1 ) + '">' );
			template.push( '<img src="" rel:animated_src="' + url + '" rel:auto_play="1" />' );
			template.push( '</a>' );

			styles.push( '#' + HASH_PREFIX + ( counter - 1 ) + ':target { background-image: url(../' + url + '); }' );
			counter++;
		}
	}
	console.log( template.length );
	//console.log( template.join( "\n" ) );
});

fs.readFile( TEMPLATE_FILE, function( err, templateStr ) {
	if (err) {
		throw err;
	}

	fs.writeFile( FALLBACK_STYLE_FILE, styles.join( "\n" ), function( err ) {
		if(err) {
			console.log(err);
		} else {
			console.log( FALLBACK_STYLE_FILE + ' was saved.' );
		}
	});

	fs.writeFile( OUTPUT_FILE, ejs.render( '' + templateStr, {
		warning: AUTOGENERATED_WARNING,
		images: template.join( "\n" )
	} ), function( err ) {
		if(err) {
			console.log(err);
		} else {
			console.log( OUTPUT_FILE + ' was saved.' );
		}
	}); 
});